package main_test

import (
	m "advent/internal/2024/day9"
	"slices"
	"testing"
)

func TestParseBlocks(t *testing.T) {
	const l = 4
	cases := [l]string{
		"103984509",
		"93841",
		"909090",
		"1010101010101010101010101",
	}

	expected := [l][]int{
		{0, 1, 1, 1, -9, 2, 2, 2, 2, 2, 2, 2, 2, -4, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 1, 1, 1, 1, 1, 1, 1, 1, -4, 2},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12},
	}
	
	for i := range l {
		result := m.ParseBlocks(cases[i])
		if !slices.Equal(result, expected[i]) {
			t.Errorf("Expected %v \ngot %v\n", expected[i], result)
		}
	}
}

func TestSortBlocks(t *testing.T) {
	const l = 4
	cases := [l][]int{
		{0, 1, 1, 1, -9, 2, 2, 2, 2, 2, 2, 2, 2, -4, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 1, 1, 1, 1, 1, 1, 1, 1, -4, 2},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12},
	}

	expected := [l][]int{
		{0, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12},
	}

	for i := range l {
		result := m.SortBlocks(cases[i])
		if !slices.Equal(result, expected[i]) {
			t.Errorf("Expected %v \ngot %v\n", expected[i], result)
		}
	}
}

func TestCreateChecksum(t *testing.T) {
	const l = 4
	cases := [l][]int{
		{0, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12},
	}

	expected := [l]int{
		1 * 1 + 2 * 1 + 3 * 1 + 4 * 4 + 5 * 4 + 6 * 4 + 7 * 4 + 8 * 4 + 9 * 4 + 10 * 4 + 11 * 4 + 12 * 4 + 13 * 2 +14 * 2 +15 * 2 +16 * 2 +17 * 2 +18 * 2 +19 * 2 +20 * 2 + 21 * 3 + 22 * 3 + 23 * 3 + 24 * 3 + 25 * 3,

		0 * 0 + 9 * 2 + 10 * 1 + 11 * 1 + 12 * 1 + 13 * 1 + 14 * 1 + 15 * 1 + 16 * 1 + 17 * 1, 

		9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 * 2 + 19 * 2 + 20 * 2 + 21 * 2 + 22 * 2 + 23 * 2 + 24 * 2 + 25 * 2 + 26 * 2,

		1 * 1 + 2 * 2 + 3 * 3 + 4 * 4 + 5 * 5 + 6 * 6 + 7 * 7 + 8 * 8 + 9 * 9 + 10 * 10 + 11 * 11 + 12 * 12,
	}

	for i := range l {
		result := m.CreateChecksum(cases[i])
		if result != expected[i] {
			t.Errorf("Failed on case %d: Expected %v \ngot %v\n", i, expected[i], result)
		}
	}
}
