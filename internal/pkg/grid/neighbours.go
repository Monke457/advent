package grid

func GetNeighboursCont[T comparable](data [][]T, pos [2]int) [][2]int {
	neighbours := [][2]int{}
	for _, dir := range dirsCont {
		y, x := pos[0] + dir[0], pos[1] + dir[1]
		if oob(data, y, x) {
			continue
		}
		neighbours = append(neighbours, [2]int{y, x})
	}
	return neighbours
}

func GetNeighbours[T comparable](data [][]T, pos [2]int) [][2]int {
	neighbours := [][2]int{}
	for _, dir := range dirs {
		y, x := pos[0] + dir[0], pos[1] + dir[1]
		if oob(data, y, x) {
			continue
		}
		neighbours = append(neighbours, [2]int{y, x})
	}
	return neighbours
}

func CountNeighbours[T comparable](data [][]T, pos [2]int) int {
	count := 0
	for _, dir := range dirs {
		y, x := pos[0] + dir[0], pos[1] + dir[1]
		if oob(data, y, x) {
			continue
		}
		count++
	}
	return count
}

func Neighbours2D() [][]int {
	return [][]int {
		{-1, -1},
		{0, -1},
		{1, -1},
		{-1, 0},
		{1, 0},
		{-1, 1},
		{0, 1},
		{1, 1},
	}
}

func Neighbours3D() [][]int {
	return [][]int {
		{-1, -1, -1},
		{0, -1, -1},
		{1, -1, -1},
		{-1, 0, -1},
		{0, 0, -1},
		{1, 0, -1},
		{-1, 1, -1},
		{0, 1, -1},
		{1, 1, -1},
		{-1, -1, 0},
		{0, -1, 0},
		{1, -1, 0},
		{-1, 0, 0},
		{1, 0, 0},
		{-1, 1, 0},
		{0, 1, 0},
		{1, 1, 0},
		{-1, -1, 1},
		{0, -1, 1},
		{1, -1, 1},
		{-1, 0, 1},
		{0, 0, 1},
		{1, 0, 1},
		{-1, 1, 1},
		{0, 1, 1},
		{1, 1, 1},
	}
}

func Neighbours4D() [][]int {
	return [][]int {
		{-1, -1, -1, -1},
		{0, -1, -1, -1},
		{1, -1, -1, -1},
		{-1, 0, -1, -1},
		{0, 0, -1, -1},
		{1, 0, -1, -1},
		{-1, 1, -1, -1},
		{0, 1, -1, -1},
		{1, 1, -1, -1},
		{-1, -1, 0, -1},
		{0, -1, 0, -1},
		{1, -1, 0, -1},
		{-1, 0, 0, -1},
		{0, 0, 0, -1},
		{1, 0, 0, -1},
		{-1, 1, 0, -1},
		{0, 1, 0, -1},
		{1, 1, 0, -1},
		{-1, -1, 1, -1},
		{0, -1, 1, -1},
		{1, -1, 1, -1},
		{-1, 0, 1, -1},
		{0, 0, 1, -1},
		{1, 0, 1, -1},
		{-1, 1, 1, -1},
		{0, 1, 1, -1},
		{1, 1, 1, -1},
		{-1, -1, -1, 0},
		{0, -1, -1, 0},
		{1, -1, -1, 0},
		{-1, 0, -1, 0},
		{0, 0, -1, 0},
		{1, 0, -1, 0},
		{-1, 1, -1, 0},
		{0, 1, -1, 0},
		{1, 1, -1, 0},
		{-1, -1, 0, 0},
		{0, -1, 0, 0},
		{1, -1, 0, 0},
		{-1, 0, 0, 0},
		{1, 0, 0, 0},
		{-1, 1, 0, 0},
		{0, 1, 0, 0},
		{1, 1, 0, 0},
		{-1, -1, 1, 0},
		{0, -1, 1, 0},
		{1, -1, 1, 0},
		{-1, 0, 1, 0},
		{0, 0, 1, 0},
		{1, 0, 1, 0},
		{-1, 1, 1, 0},
		{0, 1, 1, 0},
		{1, 1, 1, 0},
		{-1, -1, -1, 1},
		{0, -1, -1, 1},
		{1, -1, -1, 1},
		{-1, 0, -1, 1},
		{0, 0, -1, 1},
		{1, 0, -1, 1},
		{-1, 1, -1, 1},
		{0, 1, -1, 1},
		{1, 1, -1, 1},
		{-1, -1, 0, 1},
		{0, -1, 0, 1},
		{1, -1, 0, 1},
		{-1, 0, 0, 1},
		{0, 0, 0, 1},
		{1, 0, 0, 1},
		{-1, 1, 0, 1},
		{0, 1, 0, 1},
		{1, 1, 0, 1},
		{-1, -1, 1, 1},
		{0, -1, 1, 1},
		{1, -1, 1, 1},
		{-1, 0, 1, 1},
		{0, 0, 1, 1},
		{1, 0, 1, 1},
		{-1, 1, 1, 1},
		{0, 1, 1, 1},
		{1, 1, 1, 1},
	}
}
